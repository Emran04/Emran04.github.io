{"version":3,"sources":["webpack:///./src/templates/project.jsx","webpack:///./src/components/SEO/SEO.jsx","webpack:///./node_modules/url-join/lib/url-join.js"],"names":["PostTemplate","render","this","props","data","slug","pageContext","postNode","markdownRemark","post","frontmatter","id","category_id","config","postDefaultCategoryID","title","siteTitle","postPath","postSEO","className","Body","moment","date","format","Text","dangerouslySetInnerHTML","__html","html","React","Component","pageQuery","SEO","description","image","postURL","postMeta","excerpt","cover","urljoin","siteUrl","pathPrefix","siteDescription","siteLogo","match","blogURL","schemaOrgJSONLD","url","name","alternateName","siteTitleAlt","push","itemListElement","position","item","headline","content","type","JSON","stringify","property","siteFBAppID","userTwitter","definition","normalize","strArray","resultArray","length","TypeError","first","shift","replace","i","component","str","join","parts","split","arguments","slice","call","module","exports"],"mappings":"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","file":"component---src-templates-project-jsx-d5a3a267379ef961f20c.js","sourcesContent":["import React from \"react\";\nimport Helmet from \"react-helmet\";\nimport { graphql } from \"gatsby\";\nimport Layout from \"../layout\";\n// import UserInfo from \"../components/UserInfo/UserInfo\";\n// import Disqus from \"../components/Disqus/Disqus\";\n// import PostTags from \"../components/PostTags/PostTags\";\n// import SocialLinks from \"../components/SocialLinks/SocialLinks\";\nimport SEO from \"../components/SEO/SEO\";\nimport config from \"../../data/SiteConfig\";\nimport \"./b16-tomorrow-dark.css\";\nimport \"./post.css\";\nimport Card from 'react-bootstrap/Card'\nimport moment from 'moment'\n\nexport default class PostTemplate extends React.Component {\n\trender() {\n\t\tconst { data, pageContext } = this.props;\n\t\tconst { slug } = pageContext;\n\t\tconst postNode = data.markdownRemark;\n\t\tconst post = postNode.frontmatter;\n\t\tif (!post.id) {\n\t\t\tpost.id = slug;\n\t\t}\n\t\tif (!post.category_id) {\n\t\t\tpost.category_id = config.postDefaultCategoryID;\n\t\t}\n\t\treturn (\n\t\t\t<Layout>\n\t\t\t\t<div>\n\t\t\t\t\t<Helmet>\n\t\t\t\t\t\t<title>{`${post.title} | ${config.siteTitle}`}</title>\n\t\t\t\t\t</Helmet>\n\t\t\t\t\t<SEO postPath={slug} postNode={postNode} postSEO />\n\t\t\t\t\t<Card className=\"single-post\">\n\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t<h1 className=\"single-post-title\">{post.title}</h1>\n\t\t\t\t\t\t\t<p>Posted on: {moment(post.date).format(\"DD/MM/YYYY\")}</p>\n\t\t\t\t\t\t\t<Card.Text dangerouslySetInnerHTML={{ __html: postNode.html }} />\n\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t</Card>\n\t\t\t\t\t{/* <PostTags tags={post.tags} />\n\t\t\t\t\t\t\t<SocialLinks postPath={slug} postNode={postNode} /> */}\n\t\t\t\t\t{/* <UserInfo config={config} /> */}\n\t\t\t\t\t{/* <Disqus postNode={postNode} /> */}\n\t\t\t\t</div>\n\t\t\t</Layout>\n\t\t);\n\t}\n}\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query ProjectPostBySlug($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      timeToRead\n      excerpt\n      frontmatter {\n        title\n        cover\n        date\n        category\n        tags\n      }\n      fields {\n        slug\n        date\n      }\n    }\n  }\n`;\n","import React, { Component } from \"react\";\nimport Helmet from \"react-helmet\";\nimport urljoin from \"url-join\";\nimport config from \"../../../data/SiteConfig\";\n\nclass SEO extends Component {\n  render() {\n    const { postNode, postPath, postSEO } = this.props;\n    let title;\n    let description;\n    let image;\n    let postURL;\n    if (postSEO) {\n      const postMeta = postNode.frontmatter;\n      ({ title } = postMeta);\n      description = postMeta.description\n        ? postMeta.description\n        : postNode.excerpt;\n      image = postMeta.cover;\n      postURL = urljoin(config.siteUrl, config.pathPrefix, postPath);\n    } else {\n      title = config.siteTitle;\n      description = config.siteDescription;\n      image = config.siteLogo;\n    }\n\n    if (\n      !image.match(\n        `(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]`\n      )\n    )\n      image = urljoin(config.siteUrl, config.pathPrefix, image);\n\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix);\n    const schemaOrgJSONLD = [\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"WebSite\",\n        url: blogURL,\n        name: title,\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\"\n      }\n    ];\n    if (postSEO) {\n      schemaOrgJSONLD.push(\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          itemListElement: [\n            {\n              \"@type\": \"ListItem\",\n              position: 1,\n              item: {\n                \"@id\": postURL,\n                name: title,\n                image\n              }\n            }\n          ]\n        },\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BlogPosting\",\n          url: blogURL,\n          name: title,\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\n          headline: title,\n          image: {\n            \"@type\": \"ImageObject\",\n            url: image\n          },\n          description\n        }\n      );\n    }\n    return (\n      <Helmet>\n        {/* General tags */}\n        <meta name=\"description\" content={description} />\n        <meta name=\"image\" content={image} />\n\n        {/* Schema.org tags */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify(schemaOrgJSONLD)}\n        </script>\n\n        {/* OpenGraph tags */}\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={image} />\n        <meta\n          property=\"fb:app_id\"\n          content={config.siteFBAppID ? config.siteFBAppID : \"\"}\n        />\n\n        {/* Twitter Card tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta\n          name=\"twitter:creator\"\n          content={config.userTwitter ? config.userTwitter : \"\"}\n        />\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:description\" content={description} />\n        <meta name=\"twitter:image\" content={image} />\n      </Helmet>\n    );\n  }\n}\n\nexport default SEO;\n","require(\"core-js/modules/es6.regexp.split\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\n(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();else if (typeof define === 'function' && define.amd) define(definition);else context[name] = definition();\n})('urljoin', this, function () {\n  function normalize(strArray) {\n    var resultArray = [];\n\n    if (strArray.length === 0) {\n      return '';\n    }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    } // If the first part is a plain protocol, we combine it with the next part.\n\n\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    } // There must be two or three slashes in the file protocol, two slashes in anything else.\n\n\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') {\n        continue;\n      }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n    }\n\n    var str = resultArray.join('/'); // Each input component is now separated by a single slash except the possible first plain protocol part.\n    // remove trailing slash before parameters or hash\n\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1'); // replace ? in parameters with &\n\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&');\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n});"],"sourceRoot":""}