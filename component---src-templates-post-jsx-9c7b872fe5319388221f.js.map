{"version":3,"sources":["webpack:///./src/templates/post.jsx","webpack:///./src/components/SEO/SEO.jsx","webpack:///./node_modules/url-join/lib/url-join.js"],"names":["PostTemplate","render","this","props","data","slug","pageContext","postNode","markdownRemark","post","frontmatter","id","category_id","config","postDefaultCategoryID","title","siteTitle","postPath","postSEO","className","Body","Text","dangerouslySetInnerHTML","__html","html","React","Component","pageQuery","SEO","description","image","postURL","postMeta","excerpt","cover","urljoin","siteUrl","pathPrefix","siteDescription","siteLogo","match","blogURL","schemaOrgJSONLD","url","name","alternateName","siteTitleAlt","push","itemListElement","position","item","headline","content","type","JSON","stringify","property","siteFBAppID","userTwitter","definition","normalize","strArray","resultArray","length","TypeError","first","shift","replace","i","component","str","join","parts","split","arguments","slice","call","module","exports"],"mappings":"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","file":"component---src-templates-post-jsx-9c7b872fe5319388221f.js","sourcesContent":["import React from \"react\";\r\nimport Helmet from \"react-helmet\";\r\nimport { graphql } from \"gatsby\";\r\nimport Layout from \"../layout\";\r\n// import UserInfo from \"../components/UserInfo/UserInfo\";\r\n// import Disqus from \"../components/Disqus/Disqus\";\r\n// import PostTags from \"../components/PostTags/PostTags\";\r\n// import SocialLinks from \"../components/SocialLinks/SocialLinks\";\r\nimport SEO from \"../components/SEO/SEO\";\r\nimport config from \"../../data/SiteConfig\";\r\nimport \"./b16-tomorrow-dark.css\";\r\nimport \"./post.css\";\r\nimport Card from 'react-bootstrap/Card'\r\n\r\nexport default class PostTemplate extends React.Component {\r\n  render() {\r\n    const { data, pageContext } = this.props;\r\n    const { slug } = pageContext;\r\n    const postNode = data.markdownRemark;\r\n    const post = postNode.frontmatter;\r\n    if (!post.id) {\r\n      post.id = slug;\r\n    }\r\n    if (!post.category_id) {\r\n      post.category_id = config.postDefaultCategoryID;\r\n    }\r\n    return (\r\n      <Layout>\r\n        <div>\r\n          <Helmet>\r\n            <title>{`${post.title} | ${config.siteTitle}`}</title>\r\n          </Helmet>\r\n          <SEO postPath={slug} postNode={postNode} postSEO />\r\n          <div className=\"container\">\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t<div className=\"col\">\r\n\t\t\t\t\t\t\t<Card className=\"single-post\">\r\n\t\t\t\t\t\t\t\t<Card.Body>\r\n\t\t\t\t\t\t\t\t\t<h2>{post.title}</h2>\r\n\t\t\t\t\t\t\t\t\t<Card.Text dangerouslySetInnerHTML={{ __html: postNode.html }}>\r\n\r\n\t\t\t\t\t\t\t\t\t</Card.Text>\r\n\t\t\t\t\t\t\t\t</Card.Body>\r\n\t\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t\t\t{/* <PostTags tags={post.tags} />\r\n\t\t\t\t\t\t\t<SocialLinks postPath={slug} postNode={postNode} /> */}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n            {/* <UserInfo config={config} /> */}\r\n            {/* <Disqus postNode={postNode} /> */}\r\n          </div>\r\n        </div>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\n/* eslint no-undef: \"off\" */\r\nexport const pageQuery = graphql`\r\n  query BlogPostBySlug($slug: String!) {\r\n    markdownRemark(fields: { slug: { eq: $slug } }) {\r\n      html\r\n      timeToRead\r\n      excerpt\r\n      frontmatter {\r\n        title\r\n        cover\r\n        date\r\n        category\r\n        tags\r\n      }\r\n      fields {\r\n        slug\r\n        date\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React, { Component } from \"react\";\r\nimport Helmet from \"react-helmet\";\r\nimport urljoin from \"url-join\";\r\nimport config from \"../../../data/SiteConfig\";\r\n\r\nclass SEO extends Component {\r\n  render() {\r\n    const { postNode, postPath, postSEO } = this.props;\r\n    let title;\r\n    let description;\r\n    let image;\r\n    let postURL;\r\n    if (postSEO) {\r\n      const postMeta = postNode.frontmatter;\r\n      ({ title } = postMeta);\r\n      description = postMeta.description\r\n        ? postMeta.description\r\n        : postNode.excerpt;\r\n      image = postMeta.cover;\r\n      postURL = urljoin(config.siteUrl, config.pathPrefix, postPath);\r\n    } else {\r\n      title = config.siteTitle;\r\n      description = config.siteDescription;\r\n      image = config.siteLogo;\r\n    }\r\n\r\n    if (\r\n      !image.match(\r\n        `(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]`\r\n      )\r\n    )\r\n      image = urljoin(config.siteUrl, config.pathPrefix, image);\r\n\r\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix);\r\n    const schemaOrgJSONLD = [\r\n      {\r\n        \"@context\": \"http://schema.org\",\r\n        \"@type\": \"WebSite\",\r\n        url: blogURL,\r\n        name: title,\r\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\"\r\n      }\r\n    ];\r\n    if (postSEO) {\r\n      schemaOrgJSONLD.push(\r\n        {\r\n          \"@context\": \"http://schema.org\",\r\n          \"@type\": \"BreadcrumbList\",\r\n          itemListElement: [\r\n            {\r\n              \"@type\": \"ListItem\",\r\n              position: 1,\r\n              item: {\r\n                \"@id\": postURL,\r\n                name: title,\r\n                image\r\n              }\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          \"@context\": \"http://schema.org\",\r\n          \"@type\": \"BlogPosting\",\r\n          url: blogURL,\r\n          name: title,\r\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\r\n          headline: title,\r\n          image: {\r\n            \"@type\": \"ImageObject\",\r\n            url: image\r\n          },\r\n          description\r\n        }\r\n      );\r\n    }\r\n    return (\r\n      <Helmet>\r\n        {/* General tags */}\r\n        <meta name=\"description\" content={description} />\r\n        <meta name=\"image\" content={image} />\r\n\r\n        {/* Schema.org tags */}\r\n        <script type=\"application/ld+json\">\r\n          {JSON.stringify(schemaOrgJSONLD)}\r\n        </script>\r\n\r\n        {/* OpenGraph tags */}\r\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\r\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\r\n        <meta property=\"og:title\" content={title} />\r\n        <meta property=\"og:description\" content={description} />\r\n        <meta property=\"og:image\" content={image} />\r\n        <meta\r\n          property=\"fb:app_id\"\r\n          content={config.siteFBAppID ? config.siteFBAppID : \"\"}\r\n        />\r\n\r\n        {/* Twitter Card tags */}\r\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n        <meta\r\n          name=\"twitter:creator\"\r\n          content={config.userTwitter ? config.userTwitter : \"\"}\r\n        />\r\n        <meta name=\"twitter:title\" content={title} />\r\n        <meta name=\"twitter:description\" content={description} />\r\n        <meta name=\"twitter:image\" content={image} />\r\n      </Helmet>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SEO;\r\n","require(\"core-js/modules/es6.regexp.split\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\n(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();else if (typeof define === 'function' && define.amd) define(definition);else context[name] = definition();\n})('urljoin', this, function () {\n  function normalize(strArray) {\n    var resultArray = [];\n\n    if (strArray.length === 0) {\n      return '';\n    }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    } // If the first part is a plain protocol, we combine it with the next part.\n\n\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    } // There must be two or three slashes in the file protocol, two slashes in anything else.\n\n\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') {\n        continue;\n      }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n    }\n\n    var str = resultArray.join('/'); // Each input component is now separated by a single slash except the possible first plain protocol part.\n    // remove trailing slash before parameters or hash\n\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1'); // replace ? in parameters with &\n\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&');\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n});"],"sourceRoot":""}