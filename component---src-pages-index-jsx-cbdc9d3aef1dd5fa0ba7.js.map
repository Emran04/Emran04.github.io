{"version":3,"sources":["webpack:///./src/pages/index.jsx","webpack:///./src/components/SEO/SEO.jsx","webpack:///./node_modules/url-join/lib/url-join.js","webpack:///./src/components/PostListing/PostListing.jsx"],"names":["Index","props","postEdges","data","allMarkdownRemark","edges","className","title","config","siteTitle","pageQuery","SEO","render","description","image","postURL","this","postNode","postPath","postSEO","postMeta","frontmatter","excerpt","cover","urljoin","siteUrl","pathPrefix","siteDescription","siteLogo","match","blogURL","schemaOrgJSONLD","url","name","alternateName","siteTitleAlt","push","itemListElement","position","item","headline","content","type","JSON","stringify","property","siteFBAppID","userTwitter","Component","definition","normalize","strArray","resultArray","length","TypeError","first","shift","replace","i","component","str","join","parts","split","arguments","slice","call","module","exports","PostListing","postList","forEach","postEdge","path","node","fields","slug","tags","date","timeToRead","getPostList","map","post","key","Body","to","moment","format","Text"],"mappings":"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","file":"component---src-pages-index-jsx-cbdc9d3aef1dd5fa0ba7.js","sourcesContent":["import React from \"react\";\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\n\nimport { graphql } from \"gatsby\";\nimport Layout from \"../layout\";\nimport PostListing from \"../components/PostListing/PostListing\";\nimport SEO from \"../components/SEO/SEO\";\nimport config from \"../../data/SiteConfig\";\n\nconst Index = (props) => {\n\tconst postEdges = props.data.allMarkdownRemark.edges;\n\treturn (\n\t\t<HelmetProvider>\n\t\t\t<Layout>\n\t\t\t\t<div className=\"index-container\">\n\t\t\t\t\t<Helmet title={config.siteTitle} />\n\t\t\t\t\t<SEO />\n\t\t\t\t\t<PostListing postEdges={postEdges} />\n\t\t\t\t</div>\n\t\t\t</Layout>\n\t\t</HelmetProvider>\n\t);\n}\n\nexport default Index;\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query IndexQuery {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [fields___date], order: DESC }\n      filter: { fileAbsolutePath: {regex : \"\\/posts/\"} },\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n            date\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            cover\n            date\n          }\n        }\n      }\n    }\n  }\n`;\n","import React, { Component } from \"react\";\nimport Helmet from \"react-helmet\";\nimport urljoin from \"url-join\";\nimport config from \"../../../data/SiteConfig\";\n\nclass SEO extends Component {\n  render() {\n    const { postNode, postPath, postSEO } = this.props;\n    let title;\n    let description;\n    let image;\n    let postURL;\n    if (postSEO) {\n      const postMeta = postNode.frontmatter;\n      ({ title } = postMeta);\n      description = postMeta.description\n        ? postMeta.description\n        : postNode.excerpt;\n      image = postMeta.cover;\n      postURL = urljoin(config.siteUrl, config.pathPrefix, postPath);\n    } else {\n      title = config.siteTitle;\n      description = config.siteDescription;\n      image = config.siteLogo;\n    }\n\n    if (\n      !image.match(\n        `(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]`\n      )\n    )\n      image = urljoin(config.siteUrl, config.pathPrefix, image);\n\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix);\n    const schemaOrgJSONLD = [\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"WebSite\",\n        url: blogURL,\n        name: title,\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\"\n      }\n    ];\n    if (postSEO) {\n      schemaOrgJSONLD.push(\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          itemListElement: [\n            {\n              \"@type\": \"ListItem\",\n              position: 1,\n              item: {\n                \"@id\": postURL,\n                name: title,\n                image\n              }\n            }\n          ]\n        },\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BlogPosting\",\n          url: blogURL,\n          name: title,\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\n          headline: title,\n          image: {\n            \"@type\": \"ImageObject\",\n            url: image\n          },\n          description\n        }\n      );\n    }\n    return (\n      <Helmet>\n        {/* General tags */}\n        <meta name=\"description\" content={description} />\n        <meta name=\"image\" content={image} />\n\n        {/* Schema.org tags */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify(schemaOrgJSONLD)}\n        </script>\n\n        {/* OpenGraph tags */}\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={image} />\n        <meta\n          property=\"fb:app_id\"\n          content={config.siteFBAppID ? config.siteFBAppID : \"\"}\n        />\n\n        {/* Twitter Card tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta\n          name=\"twitter:creator\"\n          content={config.userTwitter ? config.userTwitter : \"\"}\n        />\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:description\" content={description} />\n        <meta name=\"twitter:image\" content={image} />\n      </Helmet>\n    );\n  }\n}\n\nexport default SEO;\n","require(\"core-js/modules/es6.regexp.split\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\n(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();else if (typeof define === 'function' && define.amd) define(definition);else context[name] = definition();\n})('urljoin', this, function () {\n  function normalize(strArray) {\n    var resultArray = [];\n\n    if (strArray.length === 0) {\n      return '';\n    }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    } // If the first part is a plain protocol, we combine it with the next part.\n\n\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    } // There must be two or three slashes in the file protocol, two slashes in anything else.\n\n\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') {\n        continue;\n      }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n    }\n\n    var str = resultArray.join('/'); // Each input component is now separated by a single slash except the possible first plain protocol part.\n    // remove trailing slash before parameters or hash\n\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1'); // replace ? in parameters with &\n\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&');\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n});","import React from \"react\";\nimport { Link } from \"gatsby\";\nimport Card from 'react-bootstrap/Card'\nimport './PostListing.css'\nimport moment from 'moment'\n\nconst PostListing = (props) => {\n\tconst getPostList = () => {\n\t\tconst postList = [];\n\t\tprops.postEdges.forEach(postEdge => {\n\t\t\tpostList.push({\n\t\t\t\tpath: postEdge.node.fields.slug,\n\t\t\t\ttags: postEdge.node.frontmatter.tags,\n\t\t\t\tcover: postEdge.node.frontmatter.cover,\n\t\t\t\ttitle: postEdge.node.frontmatter.title,\n\t\t\t\tdate: postEdge.node.fields.date,\n\t\t\t\texcerpt: postEdge.node.excerpt,\n\t\t\t\ttimeToRead: postEdge.node.timeToRead\n\t\t\t});\n\t\t});\n\t\treturn postList;\n\t}\n\n\tconst postList = getPostList();\n\treturn (\n\t\t<>\n\t\t\t{\n\t\t\t\tpostList.map(post => (\n\t\t\t\t\t<Card key={post.title} className=\"post\">\n\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t<h3 className=\"post-title\">\n\t\t\t\t\t\t\t\t<Link to={`/blog${post.path}`} className=\"post-link\">\n\t\t\t\t\t\t\t\t\t{post.title}\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t<p>Posted on: {moment(post.date).format(\"DD/MM/YYYY\")}</p>\n\t\t\t\t\t\t\t<Card.Text>\n\t\t\t\t\t\t\t\t{post.excerpt}\n\n\t\t\t\t\t\t\t</Card.Text>\n\t\t\t\t\t\t\t<Link to={`/blog${post.path}`}>\n\t\t\t\t\t\t\t\tRead →\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t</Card>\n\n\t\t\t\t))\n\t\t\t}\n\t\t</>\n\t);\n}\n\nexport default PostListing;\n"],"sourceRoot":""}